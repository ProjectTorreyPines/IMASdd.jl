var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#Base","page":"API Reference","title":"Base","text":"","category":"section"},{"location":"api/#IMASdd.info","page":"API Reference","title":"IMASdd.info","text":"info(uloc::AbstractString, extras::Bool=true)\n\nReturn information of a node in the IMAS data structure, possibly including extra structures\n\n\n\n\n\ninfo(@nospecialize(ids::Union{IDS,IDSvector,Type}), field::Symbol)\n\nReturn information of a filed of an IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.units","page":"API Reference","title":"IMASdd.units","text":"units(uloc::String)\n\n\n\n\n\nunits(@nospecialize(ids::IDS), field::Symbol)\n\nReturn string with units for a given IDS field\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.coordinates","page":"API Reference","title":"IMASdd.coordinates","text":"coordinates(@nospecialize(ids::IDS), field::Symbol; coord_leaves::Union{Nothing,Vector{<:Union{Nothing,Symbol}}}=nothing)\n\nReturn two lists, one of coordinate names and the other with their values in the data structure\n\nCoordinate value is nothing when the data does not have a coordinate\n\nCoordinate value is missing if the coordinate is missing in the data structure\n\nUse coord_leaves to override fetching coordinates of a given field\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.time_coordinate","page":"API Reference","title":"IMASdd.time_coordinate","text":"time_coordinate(@nospecialize(ids::IDS), field::Symbol; error_if_not_time_dependent::Bool)\n\nReturn index of time coordinate\n\nIf error_if_not_time_dependent == false it will return 0 for arrays that are not time dependent\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.access_log","page":"API Reference","title":"IMASdd.access_log","text":"IMASdd.access_log\n\nIMASdd.access_log.enable = true / false\n\n@show IMASdd.access_log\n\nempty!(IMASdd.access_log) # to reset\n\nTrack access to the data dictionary\n\n\n\n\n\n","category":"constant"},{"location":"api/#Base.getproperty","page":"API Reference","title":"Base.getproperty","text":"getproperty(@nospecialize(ids::IDS), field::Symbol; to_cocos::Int=user_cocos)\n\nReturn IDS value for requested field\n\n\n\n\n\nBase.getproperty(ids::Union{IDSraw, IDSvectorRawElement}, field::Symbol)\n\nNo processing for IDSraw and IDSvectorRawElement\n\n\n\n\n\ngetproperty(@nospecialize(ids::IDS), field::Symbol, @nospecialize(default::Any); to_cocos::Int=user_cocos)\n\nReturn IDS value for requested field or default if field is missing\n\nNOTE: This is useful because accessing a missing field in an IDS would raise an error\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.isempty","page":"API Reference","title":"Base.isempty","text":"isempty(@nospecialize(ids::IDSvector))\n\nreturns true if IDSvector is empty\n\n\n\n\n\nisempty(@nospecialize(ids::IDS); include_expr::Bool=false, eval_expr::Bool=false)\n\nReturns true if none of the IDS fields downstream have data (or expressions)\n\nNOTE: By default it does not include nor evaluate expressions\n\n\n\n\n\nisempty(@nospecialize(ids::IDS), field::Symbol; include_expr::Bool=false, eval_expr::Bool=false)\n\nReturns true if the ids field has no data (or expression)\n\nNOTE: By default it does not include nor evaluate expressions\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.isfrozen","page":"API Reference","title":"IMASdd.isfrozen","text":"isfrozen(@nospecialize(ids::IDS))\n\nReturns if the ids has been frozen\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.setproperty!","page":"API Reference","title":"Base.setproperty!","text":"Base.setproperty!(@nospecialize(ids::IDS), field::Symbol, value; skip_non_coordinates::Bool=false, error_on_missing_coordinates::Bool=true)\n\n\n\n\n\nBase.setproperty!(@nospecialize(ids::IDS), field::Symbol, value::AbstractArray{<:IDS}; skip_non_coordinates::Bool=false, error_on_missing_coordinates::Bool=true)\n\nHandle setproperty of entire vectors of IDS structures at once (ids.field is of type IDSvector)\n\n\n\n\n\nBase.setproperty!(@nospecialize(ids::IDS), field::Symbol, value::AbstractArray; skip_non_coordinates::Bool=false, error_on_missing_coordinates::Bool=true)\n\nEnsures coordinates are set before the data that depends on those coordinates.\n\nIf skip_non_coordinates is set, then fields that are not coordinates will be silently skipped.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.index","page":"API Reference","title":"IMASdd.index","text":"index(@nospecialize(ids::IDSvectorElement))\n\nReturns index of the IDSvectorElement in the parent IDSvector\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.keys_no_missing","page":"API Reference","title":"IMASdd.keys_no_missing","text":"keys_no_missing(@nospecialize(ids::IDS); include_expr::Bool=true, eval_expr::Bool=false)\n\nReturns generator of fields with data in a IDS\n\nNOTE: By default it includes expressions, but does not evaluate them. It assumes that a IDStop without data will also have no valid expressions.\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.resize!","page":"API Reference","title":"Base.resize!","text":"Base.resize!(@nospecialize(ids::IDSvector{T}), condition::Pair{String}, conditions::Pair{String}...; wipe::Bool=true, error_multiple_matches::Bool=true) where {T<:IDSvectorElement}\n\nResize if a set of conditions are not met.\n\nIf wipe=true and an entry matching the condition is found, then the content of the matching IDS is emptied.\n\nEither way, the IDS is populated with the conditions.\n\nNOTE: error_multiple_matches will delete all extra entries matching the conditions.\n\nReturns the selected IDS\n\n\n\n\n\nresize!(\n    @nospecialize(ids::IDSvector{T}),\n    identifier_name::Symbol,\n    conditions::Pair{String}...;\n    wipe::Bool=true,\n    error_multiple_matches::Bool=true\n)::T where {T<:IDSvectorElement}\n\nResize ids if identifier_name is not found based on index of index_2_name(ids) and a set of conditions are not met.\n\nIf wipe=true and an entry matching the condition is found, then the content of the matching IDS is emptied.\n\nEither way, the IDS is populated with the conditions.\n\nNOTE: error_multiple_matches will delete all extra entries matching the conditions.\n\nReturns the selected IDS\n\n\n\n\n\nresize!(@nospecialize(ids::IDSvector{T}); wipe::Bool=true) where {T<:IDSvectorTimeElement}\n\nResize time dependent array at global_time\n\n\n\n\n\nresize!(@nospecialize(ids::IDSvector{T}), time0::Float64; wipe::Bool=true) where {T<:IDSvectorTimeElement}\n\nResize time dependent array based on time\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.deleteat!","page":"API Reference","title":"Base.deleteat!","text":"Base.deleteat!(@nospecialize(ids::T), condition::Pair{String}, conditions::Pair{String}...) where {T<:IDSvector}\n\nIf an entry matching the condition is found, then the content of the matching IDS is emptied\n\n\n\n\n\ndeleteat!(@nospecialize(ids::T), identifier_name::Symbol, conditions::Pair{String}...)::T where {T<:IDSvector}\n\nDeletes all entries that match based on index of index_2_name(ids)\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.ismissing","page":"API Reference","title":"Base.ismissing","text":"Base.ismissing(@nospecialize(ids::IDS), field::Symbol)\n\nreturns true/false if field is missing in IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.diff","page":"API Reference","title":"Base.diff","text":"Base.diff(\n    @nospecialize(ids1::T),\n    @nospecialize(ids2::T);\n    tol::Float64=1E-2,\n    recursive::Bool=true,\n    verbose::Bool=false) where {T<:IDS}\n\nCompares two IDSs and returns dictionary with differences\n\nNOTE: This function does not evaluate expressions (use freeze() on the IDSs to compare values instead of functions)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.top_ids","page":"API Reference","title":"IMASdd.top_ids","text":"top_ids(@nospecialize(ids::Union{IDS,IDSvector}))\n\nReturn top-level IDS in the hierarchy and nothing if top level is not a top-level IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.top_dd","page":"API Reference","title":"IMASdd.top_dd","text":"top_dd(@nospecialize(ids::Union{IDS,IDSvector}))\n\nReturn top-level dd in the hierarchy, and nothing if top level is not dd\n\n\n\n\n\n","category":"function"},{"location":"api/#Base.parent","page":"API Reference","title":"Base.parent","text":"parent(@nospecialize(ids::Union{IDS,IDSvector}); IDS_is_absolute_top::Bool=false, error_parent_of_nothing::Bool=true)\n\nReturn parent IDS/IDSvector in the hierarchy\n\nIf IDS_is_absolute_top=true then returns nothing instead of dd()\n\nIf error_parent_of_nothing=true then asking parent(nothing) will just return nothing\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.goto","page":"API Reference","title":"IMASdd.goto","text":"goto(@nospecialize(ids::Union{IDS,IDSvector}), loc::String)\n\nReach location in a given IDS\n\n\n\n\n\ngoto(@nospecialize(ids::Union{IDS,IDSvector}), path::Union{AbstractVector,Tuple})\n\nReach location in a given IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.leaves","page":"API Reference","title":"IMASdd.leaves","text":"leaves(@nospecialize(ids::IDS))\n\nReturns iterator with (filled) leaves in the IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.filled_ids_fields","page":"API Reference","title":"IMASdd.filled_ids_fields","text":"filled_ids_fields(@nospecialize(ids::IDS); eval_expr::Bool=false)\n\nReturns a vector with tuples pointing to all the (ids, field) that have data downstream\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.paths","page":"API Reference","title":"IMASdd.paths","text":"paths(@nospecialize(ids::IDS); eval_expr::Bool=false)\n\nReturns the locations in the IDS that have data downstream\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.selective_copy!","page":"API Reference","title":"IMASdd.selective_copy!","text":"selective_copy!(@nospecialize(h_in::IDS), @nospecialize(h_out::IDS), path::Vector{<:AbstractString}, time0::Float64)\n\nCopies the content of a path from one IDS to another (if the path exists) at a given time0\n\nNOTE:\n\nthe path is a i2p(ulocation)\nif time0 is NaN then all times are retained\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.selective_delete!","page":"API Reference","title":"IMASdd.selective_delete!","text":"selective_delete!(@nospecialize(h_in::IDS), path::Vector{<:AbstractString})\n\nDeletes a path from one IDS\n\nNOTE:\n\nthe path is a i2p(ulocation)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.@findall","page":"API Reference","title":"IMASdd.@findall","text":"@findall ids :symbol\n@findall ids r\"Regular Expression\"\n@findall [ids1, ids2] [:sybmol1, :symbol2]\n@findall [ids1, ids2] r\"Regular Expression\"\n\nSearches for specified fields within single/multiple IDS objects, while capturing their names into IDSFieldFinder.root_name\n\nSee also findall(root_ids::Union{IDS,IDSvector}, target::Union{Symbol,AbstractArray{Symbol},Regex}=r\"\"; kwargs) which this macro calls after expansion.\n\nArguments\n\n`root_ids:: Root IDS objects to search.\n`target_fields::Union{Symbol, AbstractArray{Symbol}, Regex}: Fields to search for, specified by a single symbol, array of symbols, or regular expression.\n\nReturns\n\nVector{IDS_Field_Finder}: A vector of IDS_Field_Finder structures, each containing details on a located field such as parent IDS, root IDS, field type, and full field path.\n\nExample\n\njulia> @findall [dd1, dd2] [:psi, :j_tor]\njulia> @findall [dd1, dd2] r\"psi\"\n\njulia> eqt = dd.equilibrium.time_slice[]\n\njulia> @findall eqt :psi\njulia> @findall eqt r\"global.*psi\"\n\n\n\n\n\n","category":"macro"},{"location":"api/#Base.findall","page":"API Reference","title":"Base.findall","text":"findall(ids::Union{IDS, IDSvector}, target_fields::Union{Symbol,AbstractArray{Symbol},Regex}=r\"\"; include_subfields::Bool=true)\n\nSearches for specified fields within IDS objects, supporting nested field exploration and customizable filtering.\n\nArguments\n\nroot_ids::Union{IDS, IDSvector}: Root IDS objects to search.\ntarget_fields::Union{Symbol, AbstractArray{Symbol}, Regex} = r\"\": Fields to search for, specified by a single symbol, array of symbols, or regular expression.\ninclude_subfields::Bool = true: If true, retrieves nested fields below the target field when found; if false, stops at the matching field.\n\nReturns\n\nVector{IDS_Field_Finder}: A vector of IDS_Field_Finder structures, each containing details on a located field such as parent IDS, root IDS, field type, and full field path.\n\nExample\n\njulia> findall(dd.equilibrium.time_slice[].global_quantities) # By default, it searches everything under given IDS\njulia> findall(dd.equilibrium.time_slice[].global_quantities, r\"\") # Same behavior (Default)\n\n# Find fields matching a single symbol within a IDS structure\njulia> IFF = findall(dd.equilibrium.time_slice, :psi)\n\n# Search for multiple symbols within multiple root IDS objects\njulia> IFF = findall([dd.equilibrium, dd.core_profiles], [:psi, :j_tor])\n\n# Use regular expressions for flexible and powerful search patterns\njulia> IFF = findall(dd, r\"prof.*1d.*psi\")\n\n# Control subfield inclusion using the `include_subfields` keyword\njulia> IFF = findall(dd, r\"prof.*2d\"; include_subfields=false)\njulia> IFF = findall(dd, r\"prof.*2d\"; include_subfields=true) # Default behavior\n\n# Default show for IFF (IDF_Field_Finder) structure\njulia> IFF\n\n# Retrieve actual values of found IDS objects (lazy evaluation)\njulia> IFF[1].value\njulia> IFF[end].value\n\n\n\n\n\nfindall(identifier_name::Symbol, @nospecialize(ids::IDSvector))\n\nReturn items from IDSvector based on index of index_2_name(ids)\n\n\n\n\n\n","category":"function"},{"location":"api/#IO","page":"API Reference","title":"IO","text":"","category":"section"},{"location":"api/#IMASdd.file2imas","page":"API Reference","title":"IMASdd.file2imas","text":"file2imas(filename::AbstractString; kw...)\n\nLoad IDS from a file that can be in different formats .json or .h5 both ITER tensorized (h5i) or OMAS hierarchical (hdf)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.is_h5i","page":"API Reference","title":"IMASdd.is_h5i","text":"is_h5i(filename::AbstractString)\n\nReturns true if a file is in ITER tensorized (h5i) format\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.dict2imas","page":"API Reference","title":"IMASdd.dict2imas","text":"dict2imas(dct::AbstractDict, @nospecialize(ids::IDS); show_warnings::Bool=true)\n\nPopulate IMAS data structure ids based on data contained in Julia dictionary dct.\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.imas2dict","page":"API Reference","title":"IMASdd.imas2dict","text":"imas2dict(ids::Union{IDS,IDSvector}; freeze::Bool=false, strict::Bool=false)\n\nPopulate Julia structure of dictionaries and vectors with data from IMAS data structure ids\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.json2imas","page":"API Reference","title":"IMASdd.json2imas","text":"json2imas(filename::AbstractString, @nospecialize(ids::IDS)=dd(); error_on_missing_coordinates::Bool=true, show_warnings::Bool=true)\n\nLoad the IMAS data structure from a JSON file with given filename\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.jstr2imas","page":"API Reference","title":"IMASdd.jstr2imas","text":"jstr2imas(json_string::String, @nospecialize(ids::IDS)=dd(); error_on_missing_coordinates::Bool=true, show_warnings::Bool=true)\n\nLoad the IMAS data structure from a JSON string\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.imas2json","page":"API Reference","title":"IMASdd.imas2json","text":"imas2json(@nospecialize(ids::Union{IDS,IDSvector}), filename::AbstractString; freeze::Bool=false, strict::Bool=false, indent::Int=0, kw...)\n\nSave the IMAS data structure to a JSON file with given filename.\n\nArguments\n\nfreeze evaluates expressions\nstrict dumps fields that are strictly in ITER IMAS only\nkw... arguments are passed to the JSON.print function\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.hdf2imas","page":"API Reference","title":"IMASdd.hdf2imas","text":"hdf2imas(filename::AbstractString, target_path::AbstractString; error_on_missing_coordinates::Bool=true, verbose::Bool=false, kw...)\n\nLoad an object from an HDF5 file using a simple entry point. Given a file and an internal target path (as a string), the function returns either the dataset’s value or an IMAS ids structure constructed from a group.\n\nIf the object at target_path is a group and has a \"concretetype\" attribute, that type is evaluated and instantiated; otherwise, a default (dd()) is used. Coordinate data is processed based on `erroronmissingcoordinates`.\n\nArguments\n\nfilename: Path to the HDF5 file\ntarget_path: Internal HDF5 path to the desired dataset or group\nerror_on_missing_coordinates (default: true): Enforce coordinate checks\nverbose (default: false): Enable verbose logging\nkw...: Additional keyword arguments passed to HDF5.h5open\n\nReturns\n\nThe value of the dataset or the constructed IMAS ids.\n\n\n\n\n\nhdf2imas(filename::AbstractString; error_on_missing_coordinates::Bool=true, kw...)\n\nLoad data from a HDF5 file generated by OMAS Python platform (ie. hierarchical HDF5)\n\nkw... arguments are passed to the HDF5.h5open function\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.hdf2dict!","page":"API Reference","title":"IMASdd.hdf2dict!","text":"hdf2dict!(gparent::Union{HDF5.File,HDF5.Group}, ids::AbstractDict)\n\nLoad data from a HDF5 file into a dictionary\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.imas2hdf","page":"API Reference","title":"IMASdd.imas2hdf","text":"imas2hdf(@nospecialize(ids::Union{IDS,IDSvector}), filename::AbstractString;\n         mode::String=\"w\", target_group::String=\"/\", overwrite::Bool=false,\n         freeze::Bool=false, strict::Bool=false, desc::String=\"\", kw...)\n\nSave an IMAS data structure to an OMAS HDF5 file.\n\nArguments:\n\nfilename: HDF5 file path\nmode: File open mode (\"w\", \"a\", or \"r+\"); \"a\" is converted to \"r+\"\ntarget_group: Group where data will be stored (default is \"/\")\noverwrite: If true, overwrite the target group if it exists\nshow_warnings: If true, display warn messages\nfreeze evaluates expressions\nstrict dumps fields that are strictly in ITER IMAS only\ndesc: description of additional information (e.g., Shot number)\ncompress: compression level, an integer between 0 (no compression) and 9 (highest)\nkw...: Options passed to the internal dispatch\n\nReturns:\n\nThe result of imas2hdf(ids, gparent; freeze, strict, desc).\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.h5i2imas","page":"API Reference","title":"IMASdd.h5i2imas","text":"h5i2imas(filename::AbstractString, @nospecialize(ids::IDS)=dd(); kw...)\n\nLoad data from a HDF5 file generated by IMAS platform (ie. tensorized HDF5)\n\nkw... arguments are passed to the HDF5.h5open function\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.imas2h5i","page":"API Reference","title":"IMASdd.imas2h5i","text":"imas2h5i(\n    @nospecialize(ids::Union{IDS,IDSvector}),\n    filename::AbstractString;\n    freeze::Bool=false,\n    strict::Bool=false,\n    run::Int=0,\n    shot::Int=0,\n    hdf5_backend_version::String=\"1.0\",\n    kw...\n)\n\nSave data to a HDF5 file generated by IMAS platform (ie. tensorized HDF5)\n\nArguments\n\nkw... arguments are passed to the HDF5.h5open function\nfreeze evaluates expressions\nstrict dumps fields that are strictly in ITER IMAS only\nrun, shot, hdf5_backend_version arguments are used to set the HDF5 attributes\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.h5merge","page":"API Reference","title":"IMASdd.h5merge","text":"h5merge(output_file::AbstractString, keys_files::Union{AbstractDict{<:AbstractString,<:AbstractString},AbstractVector{<:Pair{<:AbstractString,<:AbstractString}};\n      mode::AbstractString=\"a\", skip_existing_entries::Bool=false,\n      h5_group_search_depth::Integer=0, h5_strip_group_prefix::Bool=false,\n      verbose::Bool=false)\n\nMerges multiple files into a single HDF5 output file.\n\nArguments\n\noutput_file: Path to the HDF5 file where data will be merged.\nkeys_files: A vector or dictionary mapping target group names to input filenames.\nmode: \"w\" to create a new file or \"a\" to append to an existing one.\nskip_existing_entries: If true, groups already present in the output file are not overwritten.\nh5_group_search_depth: For input HDF5 files, the depth at which to collect group paths.\n0 means use the root (\"/\").\n1 means collect immediate children of the root.\nHigher values collect groups deeper in the hierarchy.\nh5_strip_group_prefix: If true, the target group name (the key from keys_files) is omitted from the output HDF5 path. For example, if an input file contains a group path \"/level1/level2\" and the key is \"parent\", then:\nWith h5_strip_group_prefix = false, the output path becomes \"/parent/level1/level2\".\nWith h5_strip_group_prefix = true, the output path becomes \"/level1/level2\".\nverbose: If true, additional logging information is printed.\n\nBehavior\n\nFor input files with the .h5 extension, the function opens the file and collects group paths up to h5_group_search_depth. Each collected path is modified by stripping the first N components (using \"/\" as the delimiter) according to the flag h5_strip_group_prefix (if true, the parent key is omitted). Then, the corresponding objects are copied into the output file.\nFor other file types (e.g., JSON, YAML, text, markdown), the file is read and stored as text or raw binary data.\nThe function records attributes for each copied group that indicate the original file paths.\n\nReturns a vector of group names (as strings) that were processed.\n\n\n\n\n\nh5merge(\n    output_file::AbstractString,\n    directories::AbstractVector{<:AbstractString};\n    include_base_dir::Bool=true,\n    cleanup::Bool=false,\n    kwargs...)\n\nAdd all files in multiple directories (and their subdirectories) to an HDF5 output_file\n\n\n\n\n\nh5merge(\n    output_file::AbstractString,\n    directory::AbstractString;\n    mode::AbstractString=\"a\",\n    skip_existing_entries::Bool=false,\n    follow_symlinks::Bool=false,\n    verbose::Bool=false,\n    include_base_dir::Bool=false,\n    pattern::Union{Regex,Nothing}=nothing,\n    kwargs...\n    )\n\nAdd all files in a directory (and subdirectories) to an HDF5 output_file\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.read_combined_h5","page":"API Reference","title":"IMASdd.read_combined_h5","text":"read_combined_h5(filename::AbstractString; show_warnings::Bool=true, error_on_missing_coordinates::Bool=true, pattern::Regex=r\"\", kw...)\n\nIteratively traverse an HDF5 file from the root (\"/\") using a stack.\n\nArguments\n\nfilename: Path to the combined HDF5 file\nerror_on_missing_coordinates (default true): Enforce coordinate checks during dispatch\npattern (default r\"\"): A regex used to filter which paths are processed\nkw...: Additional keyword arguments passed to hdf2imas\n\nReturns\n\nDict{String,Any}: loaded data with keys (path as string)\n\n\n\n\n\n","category":"function"},{"location":"api/#Time","page":"API Reference","title":"Time","text":"","category":"section"},{"location":"api/#IMASdd.global_time","page":"API Reference","title":"IMASdd.global_time","text":"global_time(ids::Union{IDS,IDSvector})\n\nGet the dd.global_time of a given IDS\n\nIf top-level dd cannot be reached then returns Inf\n\n\n\n\n\nglobal_time(ids::Union{IDS,IDSvector}, time0::Float64)\n\nSet the dd.global_time of a given IDS\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.set_time_array","page":"API Reference","title":"IMASdd.set_time_array","text":"set_time_array(@nospecialize(ids::IDS), field::Symbol, value)\n\nSet value of a time-dependent array at the dd.global_time\n\n\n\n\n\nset_time_array(@nospecialize(ids::IDS), field::Symbol, time0::Float64, value)\n\nSet value of a time-dependent array at time0\n\nNOTE: updates the closest causal element of an array\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.get_time_array","page":"API Reference","title":"IMASdd.get_time_array","text":"get_time_array(@nospecialize(ids::IDS{T}), field::Symbol, scheme::Symbol=:constant) where {T<:Real}\n\nGet data from a time-dependent array at the dd.global_time\n\n\n\n\n\nget_time_array(@nospecialize(ids::IDS), field::Symbol, time0::Float64, scheme::Symbol=:constant)\n\nGet data from time dependent array\n\nNOTE: logic for @ddtime array handling:\n\ninterpolation (i) scheme between array bounds\nconstant (c) extrapolation within bounds of time array\nerror (e) when time0 is before minimum(time)\n\nFor example:\n\ntime:   -oooo-\ndata:   -o-o--\nddtime: eiiicc\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.@ddtime","page":"API Reference","title":"IMASdd.@ddtime","text":"@ddtime( X.Y )\n\nGet data from time dependent array. Equivalent to:\n\nget_time_array(X, :Y)\n\nand\n\n@ddtime( X.Y = V)\n\nSet data in a time dependent array. Equivalent to:\n\nset_time_array(X, :Y, V)\n\n\n\n\n\n","category":"macro"},{"location":"api/#IMASdd.last_time","page":"API Reference","title":"IMASdd.last_time","text":"last_time(dd::DD)\n\nReturns the last time referenced in all the IDSs dd.XXX.time vectors (including dd.global_time)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.last_global_time","page":"API Reference","title":"IMASdd.last_global_time","text":"last_global_time(dd::DD)\n\nReturns the last time referenced in all the IDSs dd.XXX.time vectors (including dd.global_time)\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.new_timeslice!","page":"API Reference","title":"IMASdd.new_timeslice!","text":"new_timeslice!(@nospecialize(ids::IDS), time0::Float64=global_time(ids))\n\nRecursively appends a deepcopy at time time0 of the last time-slice of all time-dependent array structures under a given ids\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.retime!","page":"API Reference","title":"IMASdd.retime!","text":"retime!(@nospecialize(ids::IDS), time0::Float64=global_time(ids))\n\nRecursively change the time of the last time-slices or last time-depedent vector elements in a IDS\n\n\n\n\n\nretime!(@nospecialize(ids::IDS{T}), times::AbstractVector{Float64}) where {T<:Real}\n\nExtend IDSvector{<:IDSvectorTimeElement} and time dependent data arrays with times\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.get_timeslice","page":"API Reference","title":"IMASdd.get_timeslice","text":"get_timeslice(@nospecialize(ids::IDS), time0::Float64=global_time(ids), scheme::Symbol=:constant; slice_pulse_schedule::Bool=true)\n\nReturns data at the given time0 (by default at the global_time)\n\nData is selected from time dependent arrays of structures using closest causal time point.\n\nData is selected from time dependent arrays using these possible schemes [:constant, :linear, :quadratic, :cubic, :pchip, :lagrange]\n\n\n\n\n\nget_timeslice(el_type::Type{Z}, @nospecialize(ids::IDS), time0::Float64=global_time(ids), scheme::Symbol=:constant; slice_pulse_schedule::Bool=false) where {Z<:Real}\n\ngettimeslice that retuns IDS of type `eltype`\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.copy_timeslice!","page":"API Reference","title":"IMASdd.copy_timeslice!","text":"copy_timeslice!(\n    @nospecialize(ids0::IDS{T1}),\n    @nospecialize(ids::IDS{T2}),\n    time0::Float64,\n    scheme::Symbol;\n    slice_pulse_schedule::Bool) where {T1<:Real,T2<:Real}\n\nCopy data at a given time from ids to ids0\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.trim_time!","page":"API Reference","title":"IMASdd.trim_time!","text":"trim_time!(@nospecialize(ids::IDS); trim_pulse_schedule::Bool=false)\n\nRecursively remove all time dependent data tha occurs after global_time\n\n\n\n\n\ntrim_time!(@nospecialize(ids::IDS), time_range::Tuple{Float64,Float64}; trim_pulse_schedule::Bool=false)\n\nRecursively remove all time dependent data tha occurs outside of time_range\n\n\n\n\n\n","category":"function"},{"location":"api/#Math","page":"API Reference","title":"Math","text":"","category":"section"},{"location":"api/#IMASdd.interp1d","page":"API Reference","title":"IMASdd.interp1d","text":"interp1d(x, y, scheme::Symbol=:linear)\n\nOne dimensional curve interpolations with scheme [:constant, :linear, :quadratic, :cubic, :pchip, :lagrange]\n\nNOTE: this interpolation method will extrapolate\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.extrap1d","page":"API Reference","title":"IMASdd.extrap1d","text":"extrap1d(itp::DataInterpolations.AbstractInterpolation; first=:extrapolate, last=:extrapolate) where {T<:Real}\n\nfirst and last can be [:extrapolate, :flat, --value--] affect how the extrapolation is done at the either end of the array\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.gradient","page":"API Reference","title":"IMASdd.gradient","text":"gradient(coord::AbstractVector{C}, arr::AbstractVector{A}; method::Symbol=:second_order) where {C<:Real, A<:Real}\n\nThe finite difference gradient. The returned gradient has the same shape as the input array.\n\nmethod of the gradient can be one of [:backward, :central, :forward, :secondorder, :thirdorder]\n\nFor :central the gradient is computed using second order accurate central differences in the interior points and first order accurate one-sides (forward or backward) differences at the boundaries.\n\nFor :second_order the gradient is computed using second order accurate central differences in the interior points, and 2nd order differences at the boundaries.\n\nFor :third_order the gradient is computed from the cubic spline passing through the points\n\n\n\n\n\ngradient(coord1::AbstractVector, coord2::AbstractVector, mat::Matrix, dim::Int; method::Symbol=:second_order)\n\nFinite difference method of the gradient: [:backward, :central, :forward, :secondorder, :thirdorder]\n\nCan be applied to either the first (dim=1) or second (dim=2) dimension\n\n\n\n\n\ngradient(coord1::AbstractVector, coord2::AbstractVector, mat::Matrix; method::Symbol=:second_order)\n\nFinite difference method of the gradient: [:backward, :central, :forward, :secondorder, :thirdorder]\n\nComputes the gradient in both dimensions\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.nanmaximum","page":"API Reference","title":"IMASdd.nanmaximum","text":"nanmaximum(a::AbstractArray)\n\nMaximum ignoring NaNs in an array\n\n\n\n\n\n","category":"function"},{"location":"api/#IMASdd.nanminimum","page":"API Reference","title":"IMASdd.nanminimum","text":"nanminimum(a::AbstractArray)\n\nMinimum ignoring NaNs in an array\n\n\n\n\n\n","category":"function"},{"location":"license/","page":"License","title":"License","text":"                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/","category":"page"},{"location":"license/","page":"License","title":"License","text":"TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION","category":"page"},{"location":"license/","page":"License","title":"License","text":"Definitions.\n\"License\" shall mean the terms and conditions for use, reproduction, and distribution as defined by Sections 1 through 9 of this document.\n\"Licensor\" shall mean the copyright owner or entity authorized by the copyright owner that is granting the License.\n\"Legal Entity\" shall mean the union of the acting entity and all other entities that control, are controlled by, or are under common control with that entity. For the purposes of this definition, \"control\" means (i) the power, direct or indirect, to cause the direction or management of such entity, whether by contract or otherwise, or (ii) ownership of fifty percent (50%) or more of the outstanding shares, or (iii) beneficial ownership of such entity.\n\"You\" (or \"Your\") shall mean an individual or Legal Entity exercising permissions granted by this License.\n\"Source\" form shall mean the preferred form for making modifications, including but not limited to software source code, documentation source, and configuration files.\n\"Object\" form shall mean any form resulting from mechanical transformation or translation of a Source form, including but not limited to compiled object code, generated documentation, and conversions to other media types.\n\"Work\" shall mean the work of authorship, whether in Source or Object form, made available under the License, as indicated by a copyright notice that is included in or attached to the work (an example is provided in the Appendix below).\n\"Derivative Works\" shall mean any work, whether in Source or Object form, that is based on (or derived from) the Work and for which the editorial revisions, annotations, elaborations, or other modifications represent, as a whole, an original work of authorship. For the purposes of this License, Derivative Works shall not include works that remain separable from, or merely link (or bind by name) to the interfaces of, the Work and Derivative Works thereof.\n\"Contribution\" shall mean any work of authorship, including the original version of the Work and any modifications or additions to that Work or Derivative Works thereof, that is intentionally submitted to Licensor for inclusion in the Work by the copyright owner or by an individual or Legal Entity authorized to submit on behalf of the copyright owner. For the purposes of this definition, \"submitted\" means any form of electronic, verbal, or written communication sent to the Licensor or its representatives, including but not limited to communication on electronic mailing lists, source code control systems, and issue tracking systems that are managed by, or on behalf of, the Licensor for the purpose of discussing and improving the Work, but excluding communication that is conspicuously marked or otherwise designated in writing by the copyright owner as \"Not a Contribution.\"\n\"Contributor\" shall mean Licensor and any individual or Legal Entity on behalf of whom a Contribution has been received by Licensor and subsequently incorporated within the Work.\nGrant of Copyright License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable copyright license to reproduce, prepare Derivative Works of, publicly display, publicly perform, sublicense, and distribute the Work and such Derivative Works in Source or Object form.\nGrant of Patent License. Subject to the terms and conditions of this License, each Contributor hereby grants to You a perpetual, worldwide, non-exclusive, no-charge, royalty-free, irrevocable (except as stated in this section) patent license to make, have made, use, offer to sell, sell, import, and otherwise transfer the Work, where such license applies only to those patent claims licensable by such Contributor that are necessarily infringed by their Contribution(s) alone or by combination of their Contribution(s) with the Work to which such Contribution(s) was submitted. If You institute patent litigation against any entity (including a cross-claim or counterclaim in a lawsuit) alleging that the Work or a Contribution incorporated within the Work constitutes direct or contributory patent infringement, then any patent licenses granted to You under this License for that Work shall terminate as of the date such litigation is filed.\nRedistribution. You may reproduce and distribute copies of the Work or Derivative Works thereof in any medium, with or without modifications, and in Source or Object form, provided that You meet the following conditions:\n(a) You must give any other recipients of the Work or     Derivative Works a copy of this License; and\n(b) You must cause any modified files to carry prominent notices     stating that You changed the files; and\n(c) You must retain, in the Source form of any Derivative Works     that You distribute, all copyright, patent, trademark, and     attribution notices from the Source form of the Work,     excluding those notices that do not pertain to any part of     the Derivative Works; and\n(d) If the Work includes a \"NOTICE\" text file as part of its     distribution, then any Derivative Works that You distribute must     include a readable copy of the attribution notices contained     within such NOTICE file, excluding those notices that do not     pertain to any part of the Derivative Works, in at least one     of the following places: within a NOTICE text file distributed     as part of the Derivative Works; within the Source form or     documentation, if provided along with the Derivative Works; or,     within a display generated by the Derivative Works, if and     wherever such third-party notices normally appear. The contents     of the NOTICE file are for informational purposes only and     do not modify the License. You may add Your own attribution     notices within Derivative Works that You distribute, alongside     or as an addendum to the NOTICE text from the Work, provided     that such additional attribution notices cannot be construed     as modifying the License.\nYou may add Your own copyright statement to Your modifications and may provide additional or different license terms and conditions for use, reproduction, or distribution of Your modifications, or for any such Derivative Works as a whole, provided Your use, reproduction, and distribution of the Work otherwise complies with the conditions stated in this License.\nSubmission of Contributions. Unless You explicitly state otherwise, any Contribution intentionally submitted for inclusion in the Work by You to the Licensor shall be under the terms and conditions of this License, without any additional terms or conditions. Notwithstanding the above, nothing herein shall supersede or modify the terms of any separate license agreement you may have executed with Licensor regarding such Contributions.\nTrademarks. This License does not grant permission to use the trade names, trademarks, service marks, or product names of the Licensor, except as required for reasonable and customary use in describing the origin of the Work and reproducing the content of the NOTICE file.\nDisclaimer of Warranty. Unless required by applicable law or agreed to in writing, Licensor provides the Work (and each Contributor provides its Contributions) on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied, including, without limitation, any warranties or conditions of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A PARTICULAR PURPOSE. You are solely responsible for determining the appropriateness of using or redistributing the Work and assume any risks associated with Your exercise of permissions under this License.\nLimitation of Liability. In no event and under no legal theory, whether in tort (including negligence), contract, or otherwise, unless required by applicable law (such as deliberate and grossly negligent acts) or agreed to in writing, shall any Contributor be liable to You for damages, including any direct, indirect, special, incidental, or consequential damages of any character arising as a result of this License or out of the use or inability to use the Work (including but not limited to damages for loss of goodwill, work stoppage, computer failure or malfunction, or any and all other commercial damages or losses), even if such Contributor has been advised of the possibility of such damages.\nAccepting Warranty or Additional Liability. While redistributing the Work or Derivative Works thereof, You may choose to offer, and charge a fee for, acceptance of support, warranty, indemnity, or other liability obligations and/or rights consistent with this License. However, in accepting such obligations, You may act only on Your own behalf and on Your sole responsibility, not on behalf of any other Contributor, and only if You agree to indemnify, defend, and hold each Contributor harmless for any liability incurred by, or claims asserted against, such Contributor by reason of your accepting any such warranty or additional liability.","category":"page"},{"location":"license/","page":"License","title":"License","text":"END OF TERMS AND CONDITIONS","category":"page"},{"location":"license/","page":"License","title":"License","text":"APPENDIX: How to apply the Apache License to your work.","category":"page"},{"location":"license/","page":"License","title":"License","text":"  To apply the Apache License to your work, attach the following\n  boilerplate notice, with the fields enclosed by brackets \"[]\"\n  replaced with your own identifying information. (Don't include\n  the brackets!)  The text should be enclosed in the appropriate\n  comment syntax for the file format. We also recommend that a\n  file or class name and description of purpose be included on the\n  same \"printed page\" as the copyright notice for easier\n  identification within third-party archives.","category":"page"},{"location":"license/","page":"License","title":"License","text":"Copyright 2024 General Atomics","category":"page"},{"location":"license/","page":"License","title":"License","text":"Licensed under the Apache License, Version 2.0 (the \"License\");    you may not use this file except in compliance with the License.    You may obtain a copy of the License at","category":"page"},{"location":"license/","page":"License","title":"License","text":"   http://www.apache.org/licenses/LICENSE-2.0","category":"page"},{"location":"license/","page":"License","title":"License","text":"Unless required by applicable law or agreed to in writing, software    distributed under the License is distributed on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.    See the License for the specific language governing permissions and    limitations under the License.","category":"page"},{"location":"#IMASdd.jl","page":"IMASdd.jl","title":"IMASdd.jl","text":"","category":"section"},{"location":"","page":"IMASdd.jl","title":"IMASdd.jl","text":"IMASdd.jl is a Julia package that allows manipulating data according to the ITER Modeling and Analysis Suite (IMAS) data schema, also known as the ITER Physics Data Model (PDM) [Imbeaux NF 2015]. Importantly, IMASdd.jl does not use the native IMAS API, but instead implements everything natively in Julia.","category":"page"},{"location":"#Data-schema","page":"IMASdd.jl","title":"Data schema","text":"","category":"section"},{"location":"","page":"IMASdd.jl","title":"IMASdd.jl","text":"IMAS structures data around nearly 80 hierarchically ordered Interface Data Structures (IDSs). These IDSs span various modeling topics like equilibrium, kinetic profiles, and sources, as well as experimental areas including magnets, diagnostics, and heating systems. Each IDS encapsulates the necessary data pertaining to its associated plasma or tokamak subsystem. Within an IDS, every quantity is clearly described, specifying units, coordinates, and numerical type. These standardized IDSs ensure consistent data exchange across code components and facilitate code coupling in fusion Tokamak integrated simulations.","category":"page"},{"location":"","page":"IMASdd.jl","title":"IMASdd.jl","text":"Note: To update the data structure:Check that the quantity you want to store does not fit in the original IMAS ontology: IMAS Ontology\nCheck again!\nOpen an issue asking if anybody has any ideas.\nIf indeed there's no proper place to store your data, then think carefully about where things should go and edit the JSON files under IMASdd/data_dictionary/data_structures_extra accordingly. Commit your changes to the JSON files, and a GitHub action will take care of generating the associated IMASdd/src/dd.jl right in your working branch.","category":"page"},{"location":"#Time","page":"IMASdd.jl","title":"Time","text":"","category":"section"},{"location":"","page":"IMASdd.jl","title":"IMASdd.jl","text":"A standout feature of IMASdd.jl is its ability to easily manage IDSs that are non-homogeneous in time. This capability is crucial for facilitating the creation of comprehensive time-dependent simulations. The process is streamlined by introducing the concept of a global_time. When this global time of interest is defined, the data structure's API takes charge. Instead of the user having to manually decipher the time coordinate for each accessed element, the API determines it and accordingly interpolates (or updates, if writing) the data for that specific time.","category":"page"},{"location":"#Expressions","page":"IMASdd.jl","title":"Expressions","text":"","category":"section"},{"location":"","page":"IMASdd.jl","title":"IMASdd.jl","text":"A distinguishing feature of IMASdd.jl is its ability to lazily evaluate derived quantities within the data structure. Such a system of dynamic expressions ensures consistency and provides an elegant solution to the mismatching-interfaces problem, where preceding models might not furnish all the derived data needed by subsequent models.","category":"page"},{"location":"#I/O","page":"IMASdd.jl","title":"I/O","text":"","category":"section"},{"location":"","page":"IMASdd.jl","title":"IMASdd.jl","text":"The IMASdd.jl package also retains the ability to interoperate with the original IMAS infrastructure by directly reading and writing HDF5 binary files using the native \"tensorized\" IMAS data format [Meneghini NF 2020]. In addition, IMASdd.jl supports reading and writing data in the hierarchical HDF5 and JSON ASCII format which are broadly used across different projects based on the OMAS Python library. The ability to I/O data in these data files does not depend on either the original IMAS infrastructure nor OMAS being installed.","category":"page"},{"location":"","page":"IMASdd.jl","title":"IMASdd.jl","text":"Note that the error of uncertain quantities that in IMAS are stored in _error_upper fields, in IMASdd.jl they are stored as __error. However, when saved to file (whichever format) these are saved as _error_upper, thus ensuring full compatibility with both IMAS and OMAS.","category":"page"},{"location":"#Online-documentation","page":"IMASdd.jl","title":"Online documentation","text":"","category":"section"},{"location":"","page":"IMASdd.jl","title":"IMASdd.jl","text":"For more details, see the online documentation.","category":"page"},{"location":"","page":"IMASdd.jl","title":"IMASdd.jl","text":"(Image: Docs)","category":"page"},{"location":"notice/#IMASdd.jl-Notice","page":"Notice","title":"IMASdd.jl Notice","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"The purpose of this NOTICE file is to provide legal notices and acknowledgments that must be displayed to users in any derivative works or distributions. This file does not alter the terms of the Apache 2.0 license that governs the use and distribution of the IMASdd.jl package.","category":"page"},{"location":"notice/#Development-Attribution","page":"Notice","title":"Development Attribution","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"IMASdd.jl was originally developed under the FUSE project by the Magnetic Fusion Energy group at General Atomics.","category":"page"},{"location":"notice/#Citation","page":"Notice","title":"Citation","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"If this software contributes to an academic publication, please cite it as follows:","category":"page"},{"location":"notice/","page":"Notice","title":"Notice","text":"@article{meneghini2024fuse,\nauthor = {Meneghini, O. and Slendebroek, T. and Lyons, B.C. and McLaughlin, K. and McClenaghan, J. and Stagner, L. and Harvey, J. and Neiser, T.F. and Ghiozzi, A. and Dose, G. and Guterl, J. and Zalzali, A. and Cote, T. and Shi, N. and Weisberg, D. and Smith, S.P. and Grierson, B.A. and Candy, J.},\ndoi = {10.48550/arXiv.2409.05894},\njournal = {arXiv},\ntitle = {{FUSE (Fusion Synthesis Engine): A Next Generation Framework for Integrated Design of Fusion Pilot Plants}},\nyear = {2024}\n}","category":"page"},{"location":"notice/#Trademark-Notice","page":"Notice","title":"Trademark Notice","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"The names \"General Atomics\", and any associated logos or images, are trademarks of General Atomics. Use of these trademarks without prior written consent from General Atomics is strictly prohibited. Users cannot imply endorsement by General Atomics or contributors to the project simply because the project is part of their work.","category":"page"},{"location":"notice/#Copyright","page":"Notice","title":"Copyright","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"Copyright (c) 2024 General Atomics","category":"page"},{"location":"notice/#Version","page":"Notice","title":"Version","text":"","category":"section"},{"location":"notice/","page":"Notice","title":"Notice","text":"Version: v2.1","category":"page"}]
}
